{"version":3,"sources":["store/types.ts","store/index.ts","components/TodoList/TodoList.tsx","api/api.ts","store/actions.ts","store/selectors.ts","components/TodoItem/TodoItem.tsx","CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["ActionsType","SelectOptions","initialState","todos","selectedUserId","user","store","createStore","state","action","type","AddTodos","payload","SetUserId","AddUser","composeWithDevTools","request","endpoint","fetch","then","response","json","setUserIdAction","todosSelector","selectedUserIdSelector","userSelector","TodoItem","React","memo","title","completed","userId","useSelector","dispatch","useDispatch","className","cn","checked","readOnly","onClick","TodoList","useState","searchedValue","setSearchedValue","All","selectedOption","setSelectedOption","useEffect","data","filteredTodos","useMemo","filter","toLowerCase","includes","Active","Completed","value","onChange","event","target","placeholder","Number","map","todo","id","CurrentUser","name","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f17d7d42.chunk.js","sourcesContent":["import { Action as BaseAction } from 'redux';\nimport { Todo } from '../types/Todo';\nimport { User } from '../types/User';\n\nexport interface RootState {\n  todos: Todo[],\n  selectedUserId: number,\n  user: User | null,\n}\n\nexport interface Action<T, P> extends BaseAction<T> {\n  payload: P,\n}\n\nexport enum ActionsType {\n  AddTodos = 'addTodos',\n  AddUser = 'addUsers',\n  SetUserId = 'setUserId',\n}\n\ntype AddTodosAction = Action<ActionsType.AddTodos, Todo[]>;\ntype AddUserAction = Action<ActionsType.AddUser, User>;\ntype SetUserIdAction = Action<ActionsType.SetUserId, number>;\n\nexport type Actions = AddTodosAction | AddUserAction | SetUserIdAction;\n","import { createStore, Reducer, Store } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { RootState, ActionsType, Actions } from './types';\n\nconst initialState: RootState = {\n  todos: [],\n  selectedUserId: 0,\n  user: null,\n};\n\nconst reducer: Reducer<RootState, Actions> = (state = initialState, action) => {\n  switch (action.type) {\n    case ActionsType.AddTodos:\n      return {\n        ...state,\n        todos: [...state.todos, ...action.payload],\n      };\n    case ActionsType.SetUserId:\n      return {\n        ...state,\n        selectedUserId: action.payload,\n      };\n    case ActionsType.AddUser:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store: Store<RootState, Actions> = createStore(\n  reducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodosFromServer } from '../../api/api';\nimport { addTodosAction } from '../../store/actions';\nimport { todosSelector } from '../../store/selectors';\nimport { TodoItem } from '../TodoItem';\nimport './TodoList.scss';\n\nenum SelectOptions {\n  All,\n  Completed,\n  Active,\n}\n\nexport const TodoList: React.FC = React.memo(() => {\n  const dispatch = useDispatch();\n\n  const [searchedValue, setSearchedValue] = useState('');\n  const [selectedOption, setSelectedOption] = useState(SelectOptions.All);\n\n  const todos = useSelector(todosSelector);\n\n  useEffect(() => {\n    getTodosFromServer()\n      .then(data => dispatch(addTodosAction(data)));\n  }, []);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchedValue(event.target.value);\n  };\n\n  const filteredTodos = useMemo(() => {\n    return todos.filter(({ title, completed }) => {\n      switch (selectedOption) {\n        case SelectOptions.All:\n          return title.toLowerCase().includes(searchedValue.toLowerCase());\n        case SelectOptions.Active:\n          return title.toLowerCase().includes(searchedValue.toLowerCase()) && (\n            !completed\n          );\n        case SelectOptions.Completed:\n          return title.toLowerCase().includes(searchedValue.toLowerCase()) && (\n            completed\n          );\n        default:\n          return false;\n      }\n    });\n  }, [todos, searchedValue, selectedOption]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__control\">\n        <input\n          type=\"text\"\n          value={searchedValue}\n          onChange={handleChange}\n          placeholder=\"Search Todo\"\n        />\n\n        <select\n          value={selectedOption}\n          onChange={(event) => {\n            setSelectedOption(Number(event.target.value));\n          }}\n        >\n          <option value={SelectOptions.All}>\n            All\n          </option>\n          <option value={SelectOptions.Active}>\n            Active\n          </option>\n          <option value={SelectOptions.Completed}>\n            Completed\n          </option>\n        </select>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map(todo => (\n            <TodoItem\n              key={todo.id}\n              userId={todo.userId}\n              title={todo.title}\n              completed={todo.completed}\n            />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n});\n","import { Todo } from '../types/Todo';\nimport { User } from '../types/User';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (endpoint: string) => (\n  fetch(`${BASE_URL}${endpoint}`)\n    .then(response => response.json())\n);\n\nexport const getTodosFromServer = (): Promise<Todo[]> => request('/todos');\n\nexport const getUserByIdFromServer = (userId: number): Promise<User> => request(`/users/${userId}/`);\n","import { Todo } from '../types/Todo';\nimport { User } from '../types/User';\nimport { Actions, ActionsType } from './types';\n\nexport const addTodosAction = (payload: Todo[]): Actions => ({\n  type: ActionsType.AddTodos,\n  payload,\n});\n\nexport const addUserAction = (payload: User): Actions => ({\n  type: ActionsType.AddUser,\n  payload,\n});\n\nexport const setUserIdAction = (payload: number): Actions => ({\n  type: ActionsType.SetUserId,\n  payload,\n});\n","import { RootState } from './types';\n\nexport const todosSelector = (state: RootState) => state.todos;\nexport const selectedUserIdSelector = (state: RootState) => (\n  state.selectedUserId\n);\nexport const userSelector = (state: RootState) => state.user;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { setUserIdAction } from '../../store/actions';\nimport { selectedUserIdSelector } from '../../store/selectors';\n\ntype Props = Omit<Todo, 'id'>;\n\nexport const TodoItem: React.FC<Props> = React.memo(({\n  title, completed, userId,\n}) => {\n  const selectedUserId = useSelector(selectedUserIdSelector);\n  const dispatch = useDispatch();\n\n  return (\n    <li className={cn('TodoList__item', {\n      'TodoList__item--unchecked': !completed,\n      'TodoList__item--checked': completed,\n    })}\n    >\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={completed}\n          readOnly\n        />\n        <p>{title}</p>\n      </label>\n\n      <button\n        type=\"button\"\n        className={cn('TodoList__user-button', 'button', {\n          'TodoList__user-button--selected': selectedUserId === userId,\n        })}\n        onClick={() => {\n          dispatch(setUserIdAction(userId));\n        }}\n      >\n        {`User #${userId}`}\n      </button>\n    </li>\n  );\n});\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserByIdFromServer } from '../api/api';\nimport { addUserAction, setUserIdAction } from '../store/actions';\nimport { userSelector, selectedUserIdSelector } from '../store/selectors';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = React.memo(() => {\n  const user = useSelector(userSelector);\n  const selectedUserId = useSelector(selectedUserIdSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    getUserByIdFromServer(selectedUserId)\n      .then(data => dispatch(addUserAction(data)));\n  }, [selectedUserId]);\n\n  return user && (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          {`Selected user: ${user.id}`}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n      <button\n        className=\"CurrentUser__clear button\"\n        type=\"button\"\n        onClick={() => {\n          dispatch(setUserIdAction(0));\n        }}\n      >\n        Clear\n      </button>\n    </div>\n  );\n});\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './styles/style.scss';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './CurrentUser';\nimport { selectedUserIdSelector } from './store/selectors';\n\nconst App: React.FC = () => {\n  const selectedUserId = useSelector(selectedUserIdSelector);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__sidebar\">\n        <h1>Redux list of todos</h1>\n        <TodoList />\n      </div>\n\n      <div className=\"app__content\">\n        <div className=\"app__content-container\">\n          {selectedUserId ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}